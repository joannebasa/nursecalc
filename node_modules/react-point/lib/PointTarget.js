'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var touchX = function touchX(event) {
  return event.touches[0].clientX;
};

var touchY = function touchY(event) {
  return event.touches[0].clientY;
};

var PointTarget = function (_React$Component) {
  _inherits(PointTarget, _React$Component);

  function PointTarget() {
    var _temp, _this, _ret;

    _classCallCheck(this, PointTarget);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function () {
      if (!_this.usingTouch && _this.props.onPoint) _this.props.onPoint();
    }, _this.handleTouchStart = function (event) {
      _this.usingTouch = true;

      if (_this.touchStarted) return;

      _this.touchStarted = true;

      _this.touchMoved = false;
      _this.startX = touchX(event);
      _this.startY = touchY(event);
    }, _this.handleTouchMove = function (event) {
      if (!_this.touchMoved) {
        var tolerance = _this.props.tolerance;


        _this.touchMoved = Math.abs(_this.startX - touchX(event)) > tolerance || Math.abs(_this.startY - touchY(event)) > tolerance;
      }
    }, _this.handleTouchCancel = function () {
      _this.touchStarted = _this.touchMoved = false;
      _this.startX = _this.startY = 0;
    }, _this.handleTouchEnd = function () {
      _this.touchStarted = false;

      if (!_this.touchMoved && _this.props.onPoint) _this.props.onPoint();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  PointTarget.prototype.componentWillMount = function componentWillMount() {
    this.usingTouch = false;
  };

  PointTarget.prototype.render = function render() {
    var _props = this.props;
    var component = _props.component;

    var props = _objectWithoutProperties(_props, ['component']);

    // Let React setup event handlers for us.
    // TODO: Warn if they try to pass these props in?


    props.onClick = this.handleClick;
    props.onTouchStart = this.handleTouchStart;
    props.onTouchMove = this.handleTouchMove;
    props.onTouchCancel = this.handleTouchCancel;
    props.onTouchEnd = this.handleTouchEnd;

    // Avoid unknown props warning.
    delete props.onPoint;
    delete props.tolerance;

    return _react2.default.createElement(component, props);
  };

  return PointTarget;
}(_react2.default.Component);

PointTarget.propTypes = {
  component: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]).isRequired,
  tolerance: _react.PropTypes.number,
  onPoint: _react.PropTypes.func
};
PointTarget.defaultProps = {
  component: 'div',
  tolerance: 10
};
exports.default = PointTarget;